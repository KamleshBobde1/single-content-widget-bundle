{"version":3,"sources":["helper/Constant.js","api/Api.js","en.js","it.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/SingleContentList.js","page/StrapiConfigWarning.js","App.js","custom-element/et-single-app.js"],"names":["PERPAGEOPTIONS","SELECT_COLLECTION_TYPE","id","SELECT","NAME","CREATEDBY","lastEdited","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","STRAPI_BASE_URL_KEY","templateBaseUrl","process","sortByCreateDateByDescOrder","STRAPI_TOKEN","getCollectionTypes","a","axios","fetchStrapiBaseUrl","addAuthorizationRequestConfig","get","data","getContents","collectionType","page","pageSize","rootAdminEndPoint","url","getContentById","contentName","contentId","console","error","getLocales","getContentDetailsByCollectionTypeAndId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","token","window","entando","keycloak","authenticated","localStorage","getItem","headers","Authorization","config","defaultOptions","getStrapiConfigurations","then","res","catch","e","result","errorCheck","checkIfUrlExists","head","strapiBaseUrl","isError","baseUrl","status","setItem","hasOwnProperty","toJSON","name","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","parseData","JSON","parse","SimpleTable","props","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","preventDefault","className","onChangeTemplateId","setTemplateId","target","value","state","templateType","selectedTemplateType","contentAttribute","map","idx","this","selectedContent","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","defaultValue","selectedTemplateId","onChange","message","disabled","hidden","templateList","el","templateName","React","Component","Title","createdAt","createDate","selectDefaultTemplate","Config","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","forEach","element","push","label","info","pluralName","parsedCollType","collType","selectedContentId","templatesList","setState","collectionTypes","fetchContentById","event","handleTypeaheadChangeContentType","selected","selectedContentType","option","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","nameTwo","bind","xs","title","role","to","bsStyle","marginTop","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","toString","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","display","fontSize","Col","width","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","setActiveTabKey","getLocaleInfo","localeInfo","strapiUrl","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","prevProps","prevState","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","SingleContentList","initSingleContentListPage","componentWillUnmount","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","doContentSearch","btnVisibility","document","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","searchByKey","contents","getContentsByCollectionType","setSelectedContentName","contentData","selectedContentName","seletedContentData","results","find","lastPage","pagination","pageCount","totalItems","total","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","searchQuery","searchResult","handleStateOnTermSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","radioButton","defaultChecked","onPageNavigation","changePageValue","changePage","saveHandler","setContent","setCollectionType","cancelHandler","setSearchBy","setCollectionTypeState","parsedData","collectionTypeApiData","displayName","singularName","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","saveConfigBtn","lg","placeholder","intl","formatMessage","emptyLabel","options","toggleMenu","margin","align","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","injectIntl","StrapiConfigWarning","href","location","reload","App","getStrapiConfiguration","setLocale","removeItem","strapiConfLoaded","tempId","stringify","currLocale","decideLocale","en","it","path","exact","SingleWidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","ReactDOM","render","ref","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.b98a917e.chunk.js","sourcesContent":["import {  FormattedMessage } from \"react-intl\";\n/*********************\n * PAGINATION ********\n *********************/\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = <FormattedMessage id='app.selectCollection' />  \n\n/*********************\n * UI LABEL **********\n *********************/\n export const SELECT = <FormattedMessage id='app.select' />                                    //\n export const NAME = <FormattedMessage id='app.name' />\n export const CREATEDBY = <FormattedMessage id='app.created' />\n export const lastEdited = <FormattedMessage id='app.lastEdited' />\n export const CREATEDDATE = <FormattedMessage id='app.createdDate' />\n\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    lastEdited: lastEdited,\n    CREATEDDATE: CREATEDDATE,\n}\n\n//export const BTN_ADD_NEW_CONTENT = '';\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS = [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />\n\nexport const STRAPI_BASE_URL_KEY = 'STRAPI_CONFIG';\nexport const STRAPI_CONFIG_NOT_AVAIL = 'Strapi configuration not available';\nexport const STRAPI_CONTENT_MANAGER_URI = '/admin/content-manager';\nexport const BTN_RELOAD_PAGE = 'Reload Page';\nexport const STRAPI_URL = 'http://172.40.0.142:1337'","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE, STRAPI_BASE_URL_KEY } from '../helper/Constant';\n\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst STRAPI_TOKEN = {\n    'Authorization': `${KC_TOKEN_PREFIX} ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${await fetchStrapiBaseUrl()}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${await fetchStrapiBaseUrl()}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n/**\n * getContentById Search Content By Id.\n * @param {*} contentType\n * @param {*} contentId\n * @returns\n */\nexport const getContentById = async (contentName, contentId) => {\n    if (!contentName || !contentId) console.error(contentName, contentId);\n    const url = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::${contentName}.${contentName}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${await fetchStrapiBaseUrl()}/i18n/locales`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const rootAdminEndPoint = `${await fetchStrapiBaseUrl()}/content-manager/collection-types/api::`;\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`, addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // For testing purpose only\n    // return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN,\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}\n\n/**\n * Get strapi configurations\n * @returns\n */\nexport const getStrapiConfigurations = async () => {\n    const result = await axios.get(process.env.REACT_APP_STRAPI_CONFIG_BE_URL)\n        .then((res) => {\n            return res;\n        }).catch((e) => {\n            return e;\n        });\n    return errorCheck(result);\n}\n\n/**\n * Check if the given url is available\n * @param {*} url \n * @returns \n */\nexport const checkIfUrlExists = async (url) => {\n    const result = await axios.head(url)\n        .then((res) => {\n            return res;\n        }).catch((e) => {\n            return e;\n        });\n    return errorCheck(result);\n}\n\n/**\n * Get strapi configuration from local storage\n * @returns \n */\nexport const fetchStrapiBaseUrl = async () => {\n    const strapiBaseUrl = localStorage.getItem(STRAPI_BASE_URL_KEY);\n    if (!strapiBaseUrl) {\n        const { data, isError } = await getStrapiConfigurations();\n        if (!isError && data && data.data && data.data.baseUrl) {\n            const result = await checkIfUrlExists(data.data.baseUrl);\n            if (result && result.data && result.data.status === 200 && !result.isError) {\n                localStorage.setItem(STRAPI_BASE_URL_KEY, data.data.baseUrl);\n                return data.data.baseUrl;\n            }\n        }\n    }\n    return strapiBaseUrl;\n}\n\nconst errorCheck = (data) => {\n    let isError = false\n    if (data.hasOwnProperty(\"toJSON\") && data.toJSON().name === \"Error\") {\n        isError = true\n    }\n    return {\n        data,\n        isError,\n    }\n}\n","export default {\n    'app.content': 'Content',\n    'app.info': 'Info',\n    'app.name': 'Name',\n    'app.created': 'Created by',\n    'app.createdDate': 'Created date',\n    'app.selectDefaultTemplate': 'Select default template*',\n    'app.addExistingContent': 'Add existing content',\n    'app.addNewContent': 'Add new content',\n    'app.selectContent': 'Select Content',\n    'app.select': 'Select',\n    'app.selectCollection': 'Select Collection Type',\n    'app.chooseAnOption': 'Choose an option',\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Query Filter',\n    'app.cancel': 'Cancel',\n    'app.saveAsQuery': 'Save as Query',\n    'app.saveAsListOfContents': 'Save as list of Contents',\n    'app.search': 'Search',\n    'app.lastEdited': 'Last edited',\n    'app.result': 'Result',\n    'app.remove': 'Remove',\n    'app.query': 'Query',\n    'app.selectTemplate': 'Select Template',\n    'app.save': 'Save',\n    'app.edit': 'Edit content',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    'app.ok':'Ok'\n}","export default {\n    'app.content': 'Contenuto',\n    'app.info': 'Informazioni',\n    'app.name': 'Nome',\n    'app.created': 'Creata da',\n    'app.createdDate': 'Data di Creazione',\n    'app.selectDefaultTemplate': 'Seleziona il modello predefinito*',\n    'app.addExistingContent': 'Aggiungi contenuto esistente',\n    'app.addNewContent': 'Aggiungi nuovo contenuto',\n    'app.selectContent': 'Seleziona Contenuto',\n    'app.select': 'Selezionare',\n    'app.selectCollection': 'Seleziona Tipo di raccolta',\n    'app.chooseAnOption': `Scegliere un'opzione`,\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Filtro di query',\n    'app.cancel': 'Annulla',\n    'app.saveAsQuery': 'Salva come query',\n    'app.saveAsListOfContents': 'Salva come elenco di contenuti',\n    'app.search': 'Ricerca',\n    'app.lastEdited': 'Ultima modifica',\n    'app.result': 'Risultato',\n    'app.remove': 'Rimuovere',\n    'app.query': 'Domanda',\n    'app.selectTemplate': 'Seleziona Modello',\n    'app.save': 'Salva',\n    'app.edit': 'Modifica contenutoe',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    'app.ok':'Ok'\n\n}","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    // const searchByKey = '';\n    return '-';\n}\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n\nexport const parseData = (data) => data.length > 0 ? JSON.parse(data) : data;","import React from \"react\";\nimport moment from 'moment';\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport {  FormattedMessage } from \"react-intl\";\nimport { getKey } from \"../helper/Helper\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e) => {\n        this.props.setTemplateId(e.target.value);\n    }\n\n    render() {\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.selectedContent.length > 0 && (\n                                this.props.selectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>\n                                                <select name=\"modelId\" defaultValue={this.props.selectedTemplateId === 'default' ?  'none' : this.props.selectedTemplateId} className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import React, { Component } from 'react'\n\nimport {  FormattedMessage } from \"react-intl\";\nimport {\n    Row,\n    Col,\n    Button\n} from 'patternfly-react';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport { fetchStrapiBaseUrl, getCollectionTypes, getContentById, getTemplate } from '../api/Api';\nimport { Link } from 'react-router-dom';\nimport { BTN_ADD_NEW_CONTENT, STRAPI_CONTENT_MANAGER_URI } from '../helper/Constant';\nimport { parseData } from '../helper/Helper';\n\nexport default class Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            name: null,\n            nameTwo: null,\n            collectionTypes: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n\n        const parsedCollType = parseData(this.props.collType);\n        if (parsedCollType.length && this.props.selectedContentId) {\n            let { data: templatesList } = await getTemplate(parsedCollType[0].value ? parsedCollType[0].value : '');\n            this.setState({ templateList: templatesList, collectionTypes: templatesList })\n            this.fetchContentById(parsedCollType[0].value, this.props.selectedContentId);\n        }\n    }\n\n    fetchContentById = async (collectionType, contentId) => {\n        const content = await getContentById(collectionType, contentId);\n        this.setState({ selectedContent: [content] })\n    }\n\n    onChangeTemplateId = (event) => {\n        this.setState({ selectedTemplateId: event.target.value })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = async () => {\n        let strapiContentManagerUrl = `${await fetchStrapiBaseUrl()}${STRAPI_CONTENT_MANAGER_URI}`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.content\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                <span> <FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/singleconfigpage\">\n                                            <Button bsStyle=\"primary\">\n                                                {this.state.selectedContent.length ? <FormattedMessage id=\"app.edit\" /> : <FormattedMessage id=\"app.addExistingContent\" />}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    content={this.state.selectedContent}\n                                    selectedContent={this.state.selectedContent}\n                                    selectedTemplateId={this.props.selectedTemplateId}\n                                />\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </form>\n        )\n    }\n}\n","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data, strapiBaseUrl) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY], strapiBaseUrl)\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow, strapiBaseUrl));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data, strapiBaseUrl) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data, strapiBaseUrl)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true, strapiBaseUrl)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data, strapiBaseUrl) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data, strapiBaseUrl)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data, strapiBaseUrl) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()], strapiBaseUrl)\n                    :\n                    renderAccordionData(data, strapiBaseUrl)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject, strapiBaseUrl) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data, strapiBaseUrl)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data, strapiBaseUrl) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            // return <img src={fetchStrapiBaseUrl() + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n            return <img src={strapiBaseUrl + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if (isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { FormattedMessage } from \"react-intl\";\nimport { fetchStrapiBaseUrl, getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{},\n            strapiBaseUrl: ''\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n        this.props.setActiveTabKey(index);\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n        const strapiUrl = await fetchStrapiBaseUrl();\n        this.setState({ strapiBaseUrl: strapiUrl });\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n      if (this.props.collectionType && this.props.contentId) {\n        if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n          const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n          this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n          this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n          this.props.setActiveTabKey(0);\n          this.setState({ currentCode: [this.props.contentId] })\n        }\n      }\n    }\n    \n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModal, this.state.strapiBaseUrl)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                        <FormattedMessage id='app.ok'/>\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import {\n  Col, Grid, PaginationRow, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";\nimport { PAGINATION_MESSAGES, parseData } from '../helper/Helper';\n\nclass SingleContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      // Modal State\n      show: false,\n      activeTabKey: 0,\n\n      contentDetailsOnModal: {},\n      searchQuery: '',\n      setSearchBy: '',\n      searchBtnClk: false,\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: {},\n      contentIdForModal: ''\n\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => await this.initSingleContentListPage();\n\n  componentWillUnmount = () => this.shouldShowEtSaveBtn('visible');\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.doContentSearch();\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      // this.setState({ selectedContent: null }); Commented on edit to cache the content/record\n      await this.doContentSearch();\n    }\n  }\n\n  async initSingleContentListPage() {\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n    const parsedData = parseData(this.props.collType);\n    if (parsedData) {\n      this.setState({ selectedCollectionType: parsedData });\n      await this.getContentsByCollectionType(parsedData[0].value, this.state.page, this.state.pageSize);\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  async doContentSearch() {\n    if (this.searchByKey && this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, this.state.page, this.state.pageSize\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, !this.state.page ? PAGE : this.state.page, this.state.pageSize);\n    }\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n      this.setState({ show: true, contentDetailsOnModal: content,  contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.setState({ contents: [], selectedContent: {} });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n      this.props.setSelectedContentName(collType.value)\n    } else {\n      this.props.setSelectedContentName(null);\n    }\n    this.setState({ contentIdForModal: undefined, currPageWillUpdating: PAGE });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    if (this.props.collType && parseData(this.props.collType)[0].value === this.props.selectedContentName) {\n      const seletedContentData = (contentData && contentData.results) && contentData.results.find(content => {\n        if (+content.id === +this.props.selectedContentId) return content\n      });\n      if (this.props.selectedContentId) {\n        this.setState({selectedContent: seletedContentData})\n      }\n    }\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      // page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    if (this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n  fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  radioButton = (content) => {\n    if (this.state.selectedContent && this.state.selectedContent.id) {\n      if (this.props.collType.length) {\n        return (<input onChange={() => {\n          this.setState({ selectedContent: content })\n        }}\n          type=\"radio\" id={content.id} name=\"content\" value={content.id}\n          defaultChecked={this.state.selectedContent.id === content.id && parseData(this.props.collType)[0].value === this.props.selectedContentName}\n        />)\n      }\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content.id} name=\"content\" value={content.id}\n        defaultChecked={this.state.selectedContent.id === content.id}\n      />)\n    } else {\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n      />)\n    }\n  };\n\n  onPageNavigation = changePageValue => {this.setState({ searchBtnClk: false }); this.changePage(changePageValue)}\n\n  handleStateOnTermSearch(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  saveHandler = () => {\n    this.props.setContent([this.state.selectedContent]);\n    this.props.setCollectionType(this.state.selectedCollectionType);\n    this.props.setTemplateId('default');\n  }\n\n  cancelHandler = () => {this.props.collType.length && this.props.setSelectedContentName(parseData(this.props.collType)[0].value)}\n\n  render() {\n    const pagination = {\n      page: !this.state.page ? 1 : this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    let saveConfigBtn = true;\n    if (this.state.selectedContent && Object.keys(this.state.selectedContent).length) {\n      saveConfigBtn = false;\n    } else if (this.props.collType && parseData(this.props.collType)[0].value === this.props.selectedContentName) {\n      saveConfigBtn = false;\n    }\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n            <FormattedMessage id=\"app.selectContent\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b>{SELECT_COLLECTION_TYPE}</b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n             // placeholder={SELECT_COLLECTION_TYPE}\n              placeholder={this.props.intl.formatMessage({ id: \"app.chooseAnOption\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button\n                        id=\"dropdown-example\"\n                        role=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                        type=\"button\"\n                        className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.values.name}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                       // placeholder={SEARCH_CONTENT_BY_NAME}\n                       placeholder={this.props.intl.formatMessage({ id: \"app.result\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id=\"app.search\" /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            {this.radioButton(content)}\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={!this.state.lastPage ? 1 : this.state.lastPage}\n                  pageInputValue={!this.state.currPageWillUpdating ? 1 : this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.onPageNavigation(1) }}\n                  onPreviousPage={() => { this.onPageNavigation(!this.state.contents.length ? 1 : this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.onPageNavigation(this.state.page + 1) }}\n                  onLastPage={() => { this.onPageNavigation(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                  messages={PAGINATION_MESSAGES(this.props)}\n                />\n              </Col>\n            </Row>\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={9}>\n              </Col>\n              <Col sm={3} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n                  <button className=\"btn-default btn\" onClick={this.cancelHandler}><FormattedMessage id=\"app.cancel\" /></button>\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\" onClick={this.saveHandler} disabled={saveConfigBtn}><FormattedMessage id=\"app.save\" /></button>\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey}/>\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(SingleContentList);   ","import { Button } from 'patternfly-react';\nimport React from 'react';\nimport { BTN_RELOAD_PAGE, STRAPI_URL } from '../helper/Constant';\nexport default function StrapiConfigWarning() {\n    return (\n        <div className=\"well\">\n            <div>\n                <h4><strong><span className=\"pficon pficon-warning-triangle-o\"></span> {STRAPI_URL} can't be reached. \n                    Please click <a href={process.env.REACT_APP_STRAPI_CONFIG_FE_URL} target=\"_blank\">here</a> to configure it.</strong></h4>\n            </div>\n            <div className=\"mt-2\">\n                <Button bsStyle=\"primary\" onClick={() => window.location.reload()}>\n                    {BTN_RELOAD_PAGE}\n                </Button>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { IntlProvider } from \"react-intl\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { checkIfUrlExists, getStrapiConfigurations } from './api/Api.js';\nimport en from \"./en.js\";\nimport { STRAPI_BASE_URL_KEY } from './helper/Constant.js';\nimport it from \"./it.js\";\nimport Config from './page/Config';\nimport SingleContentList from './page/SingleContentList';\nimport StrapiConfigWarning from './page/StrapiConfigWarning.js';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            selectedContentName: null,\n            name: '',\n            nameTwo: 'nameTwoVar',\n            collectionType: '',\n            locale:'en',\n            strapiConfLoaded: false\n        };\n    }\n\n    componentDidMount = () => {\n        this.getStrapiConfiguration();\n        this.setLocale();\n    }\n\n    /**\n     * Get strapi configurations\n     */\n    getStrapiConfiguration = async () => {\n        localStorage.removeItem(STRAPI_BASE_URL_KEY);\n        const { data, isError } = await getStrapiConfigurations();\n        if (!isError && data && data.data && data.data.baseUrl) {\n            const result = await checkIfUrlExists(data.data.baseUrl);\n            if (result && result.data && result.data.status === 200 && !result.isError) {\n                localStorage.setItem(STRAPI_BASE_URL_KEY, data.data.baseUrl);\n            }\n        }\n        this.setState({ strapiConfLoaded: true });\n    }\n \n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContent = (data) => {\n        if (data.length) this.setState({ selectedContentId: data[0].id })\n    }\n\n    setSelectedContentName = (contentName) => {\n        this.setState({ selectedContentName: contentName, name: contentName, nameTwo: contentName })\n    }\n\n    setTemplateId = (tempId) => {\n        this.setState({ selectedTemplateId: tempId })\n    }\n\n    setCollectionType = (collType) => {\n        this.setState({ collectionType: JSON.stringify(collType) })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    decideLocale = locale => {\n        if (locale === 'en') { return en }\n        else if (locale === 'it') { return it };\n    }\n\n    /**\n     * Hide save button\n     * @param {*} btnVisibility \n     */\n    shouldShowEtSaveBtn = (btnVisibility) => {\n        for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n            el.style.visibility = btnVisibility;\n        }\n    }\n\n    render() {\n        if (!localStorage.getItem(STRAPI_BASE_URL_KEY)) {\n            this.shouldShowEtSaveBtn('hidden');\n        }\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.decideLocale(this.state.locale)}>\n                <>\n                    {this.state.strapiConfLoaded && localStorage.getItem(STRAPI_BASE_URL_KEY)\n                    ?\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config setTemplateId={this.setTemplateId}\n                                    selectedContentName={this.state.selectedContentName}\n                                    collType={this.state.collectionType}\n                                    selectedContentId={this.state.selectedContentId}\n                                    selectedTemplateId={this.state.selectedTemplateId} />\n                            </Route>\n                            <Route path='/singleconfigpage' exact>\n                                <SingleContentList\n                                    setContent={this.setContent}\n                                    selectedContentName={this.state.selectedContentName}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    selectedContentId={this.state.selectedContentId}\n                                    setCollectionType={this.setCollectionType}\n                                    collType={this.state.collectionType}\n                                    setTemplateId={this.setTemplateId}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                    :\n                    this.state.strapiConfLoaded && <StrapiConfigWarning />\n                    }\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\nclass SingleWidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n\n    get config() {\n        return (this.reactRootRef && this.reactRootRef.current) ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return (this.reactRootRef && this.reactRootRef.current) ? this.reactRootRef.current.setState(value) : {};\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n}\n\ncustomElements.get('single-content-widget-config') || customElements.define('single-content-widget-config', SingleWidgetElement);\n\nexport default SingleWidgetElement;\n\n"],"sourceRoot":""}